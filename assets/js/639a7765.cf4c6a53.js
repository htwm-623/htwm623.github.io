"use strict";(self.webpackChunkhtwm_623_website=self.webpackChunkhtwm_623_website||[]).push([[2467],{9613:(n,e,t)=>{t.d(e,{Zo:()=>u,kt:()=>d});var a=t(9496);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function c(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},o=Object.keys(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(a=0;a<o.length;a++)t=o[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var p=a.createContext({}),s=function(n){var e=a.useContext(p),t=e;return n&&(t="function"==typeof n?n(e):c(c({},e),n)),t},u=function(n){var e=s(n.components);return a.createElement(p.Provider,{value:e},n.children)},i="mdxType",m={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},g=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,o=n.originalType,p=n.parentName,u=l(n,["components","mdxType","originalType","parentName"]),i=s(t),g=r,d=i["".concat(p,".").concat(g)]||i[g]||m[g]||o;return t?a.createElement(d,c(c({ref:e},u),{},{components:t})):a.createElement(d,c({ref:e},u))}));function d(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var o=t.length,c=new Array(o);c[0]=g;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=n,l[i]="string"==typeof n?n:r,c[1]=l;for(var s=2;s<o;s++)c[s]=t[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9103:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=t(1163),r=(t(9496),t(9613));const o={title:"GraphQl\u5b66\u4e60",urlname:"bd7oz4",date:"2020-01-19 13:21:35 +0800",tags:["javascript"],categories:["\u6280\u672f\u7b14\u8bb0"]},c=void 0,l={unversionedId:"GraphQl\u5b66\u4e60",id:"GraphQl\u5b66\u4e60",title:"GraphQl\u5b66\u4e60",description:"Graph \u4ecb\u7ecd",source:"@site/docs/GraphQl\u5b66\u4e60.md",sourceDirName:".",slug:"/GraphQl\u5b66\u4e60",permalink:"/docs/GraphQl\u5b66\u4e60",draft:!1,tags:[{label:"javascript",permalink:"/docs/tags/javascript"}],version:"current",frontMatter:{title:"GraphQl\u5b66\u4e60",urlname:"bd7oz4",date:"2020-01-19 13:21:35 +0800",tags:["javascript"],categories:["\u6280\u672f\u7b14\u8bb0"]},sidebar:"tutorialSidebar",previous:{title:"Django REST framework\u793a\u4f8b",permalink:"/docs/Django REST framework\u793a\u4f8b"},next:{title:"HTTP2.0",permalink:"/docs/HTTP2.0"}},p={},s=[{value:"Graph \u4ecb\u7ecd",id:"graph-\u4ecb\u7ecd",level:2},{value:"\u57fa\u672c\u6570\u636e\u7c7b\u578b",id:"\u57fa\u672c\u6570\u636e\u7c7b\u578b",level:2},{value:"\u53c2\u6570\u4f20\u9012 \xa0",id:"\u53c2\u6570\u4f20\u9012-",level:2},{value:"GrqphQl\xa0 \u5ba2\u6237\u7aef\u8bbf\u95ee",id:"grqphql-\u5ba2\u6237\u7aef\u8bbf\u95ee",level:2},{value:"\u4f7f\u7528 Mutations\xa0 \u4fee\u6539\u6570\u636e",id:"\u4f7f\u7528-mutations-\u4fee\u6539\u6570\u636e",level:2}],u={toc:s},i="wrapper";function m(n){let{components:e,...t}=n;return(0,r.kt)(i,(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"graph-\u4ecb\u7ecd"},"Graph \u4ecb\u7ecd"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u7279\u70b9",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"\u8bf7\u6c42\u9700\u8981\u7684\u6570\u636e \u4e0d\u591a\u4e0d\u5c11"),(0,r.kt)("li",{parentName:"ul"},"\u83b7\u53d6\u591a\u4e2a\u8d44\u6e90\uff0c\u53ea\u7528\u4e00\u4e2a\u8bf7\u6c42"),(0,r.kt)("li",{parentName:"ul"},"\u63cf\u8ff0\u6240\u6709\u53ef\u80fd\u7c7b\u578b\u7684\u7cfb\u7edf,\u4fbf\u4e8e\u7ef4\u62a4,\u6839\u636e\u9700\u6c42\u5e73\u6ed1\u773c\u955c\u6f14\u8fdb,\u6dfb\u52a0\u6216\u9690\u85cf\u5b57\u6bb5"))),(0,r.kt)("li",{parentName:"ul"},"node \u76d1\u542c\u8fd0\u884c\u4fee\u6539\u6587\u4ef6\u547d\u4ee4 nodemon \u6267\u884c\u547d\u4ee4"),(0,r.kt)("li",{parentName:"ul"},"GraphHelloWolrd")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express");\nconst { buildSchema } = require("graphql");\nconst graphqlHTTP = require("express-graphql");\n\nconst schema = buildSchema(`\n  type Account{\n    name: String\n    age: Int\n    sex: String\n    department: String\n  }\n  type Query {\n    hello: String\n    accountName: String\n    age: Int\n    account: Account\n  }\n`);\n\nconst root = {\n  hello: () => {\n    return "hello world";\n  },\n  accountName: () => {\n    return "xiaoming";\n  },\n  age: () => {\n    return 18;\n  },\n  account: () => {\n    return {\n      name: "nizi",\n      age: "18",\n      sex: "femail",\n      department: "school",\n    };\n  },\n};\n\nconst app = express();\n\napp.use(\n  "/graphql",\n  graphqlHTTP({\n    schema: schema,\n    rootValue: root,\n    graphiql: true,\n  })\n);\n\napp.listen(3000);\n')),(0,r.kt)("h2",{id:"\u57fa\u672c\u6570\u636e\u7c7b\u578b"},"\u57fa\u672c\u6570\u636e\u7c7b\u578b"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u57fa\u672c\u7c7b\u578b \xa0String,Int,Float,Boolean \u548c ID")),(0,r.kt)("h2",{id:"\u53c2\u6570\u4f20\u9012-"},"\u53c2\u6570\u4f20\u9012 \xa0"),(0,r.kt)("p",null,"query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'query{\n    getClassMates(classNo: 31)\n  account(username:"xiaoming") {\n    name\n    age\n    sex\n    department\n    salary(city:"canton")\n  }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"\u793a\u4f8b 2 js")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express");\nconst { buildSchema } = require("graphql");\nconst graphqlHTTP = require("express-graphql");\n\nconst schema = buildSchema(`\n    type Account {\n        name: String\n        age: Int\n        sex: String\n        department: String\n        salary(city: String): Int     \n    }\n    type Query {\n        getClassMates(classNo: Int!): [String]\n        account(username: String): Account\n    }\n`);\n\nconst root = {\n  getClassMates: ({ classNo }) => {\n    const obj = {\n      31: ["\u5f20\u4e09"],\n      61: ["\u674e\u56db"],\n    };\n    return obj[classNo];\n  },\n  account: ({ username }) => {\n    const name = username;\n    const sex = "man";\n    const age = 18;\n    const department = "development";\n    const salary = ({ city }) => {\n      if (city === "canton") {\n        return 10000;\n      }\n      return 3000;\n    };\n    return {\n      name,\n      sex,\n      age,\n      department,\n      salary,\n    };\n  },\n};\n\nconst app = express();\n\napp.use(\n  "/graphql",\n  graphqlHTTP({\n    schema: schema,\n    rootValue: root,\n    graphiql: true,\n  })\n);\n\napp.listen(3000);\n')),(0,r.kt)("h2",{id:"grqphql-\u5ba2\u6237\u7aef\u8bbf\u95ee"},"GrqphQl\xa0 \u5ba2\u6237\u7aef\u8bbf\u95ee"),(0,r.kt)("p",null,"\u793a\u4f8b 3\xa0 \u83b7\u53d6\u793a\u4f8b 2 \u4e2d\u7684\u6570\u636e"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<!DOCTYPE html>\n<html lang="en">\n  <head>\n    <meta charset="UTF-8" />\n    <title>Title</title>\n  </head>\n  <body>\n    <button onclick="getData()">\u83b7\u53d6\u6570\u636e</button>\n  </body>\n  <script>\n    function getData() {\n      const query = `\n    query Account($username: String,$city: String) {\n      account(username: $username) {\n        name\n        age\n        sex\n        salary(city: $city)\n      }\n    }\n    `;\n      const variables = { username: "xiaoming", city: "canton" };\n      fetch("/graphql", {\n        method: "POST",\n        headers: {\n          "Content-Type": "application/json",\n          Accept: "application/json",\n        },\n        body: JSON.stringify({\n          query: query,\n          variables: variables,\n        }),\n      })\n        .then((res) => res.json)\n        .then((json) => {\n          console.log(json);\n        });\n    }\n  <\/script>\n</html>\n')),(0,r.kt)("h2",{id:"\u4f7f\u7528-mutations-\u4fee\u6539\u6570\u636e"},"\u4f7f\u7528 Mutations\xa0 \u4fee\u6539\u6570\u636e"),(0,r.kt)("p",null,"\u793a\u4f8b \xa0 \u521b\u5efa\u6570\u636e\u67e5\u8be2\u4f53"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'mutation {\n  createAccount(input: {\n    name: "xiaoming",\n    age:20\n    sex: "female"\n    department: "test"\n  }) {\n    name\n    age\n    sex\n    department\n  }\n}\n')),(0,r.kt)("p",null,"\u793a\u4f8b \xa0 \u66f4\u65b0\u6570\u636e\u67e5\u8be2\u4f53"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'mutation {\n  updateAccount(id: "xiaoming", input:{\n    age:100\n  }) {\n    age\n  }\n}\n')),(0,r.kt)("p",null,"\u793a\u4f8b \xa0 \u67e5\u8be2\u6570\u636e \xa0 \u67e5\u8be2\u4f53"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"query {\n  account{\n    name\n    sex\n    age\n  }\n}\n")),(0,r.kt)("p",null,"\u793a\u4f8b \xa0mutation.js \u6587\u4ef6"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'const express = require("express");\nconst { buildSchema } = require("graphql");\nconst graphqlHTTP = require("express-graphql");\n\nconst schema = buildSchema(`\n  input AccountInput {\n    name: String\n    age: Int\n    sex: String\n    department: String\n  }\n  type Account {\n    name: String\n    age: Int\n    sex: String\n    department: String\n  }\n  type Mutation {\n    createAccount(input: AccountInput): Account\n    updateAccount(id: ID!, input: AccountInput): Account   \n  }\n  type Query {\n    account: [Account] \n   }\n`);\nconst fakeDb = {};\n\nconst root = {\n  account() {\n    let arr = [];\n    for (const key in fakeDb) {\n      arr.push(fakeDb[key]);\n    }\n    return arr;\n  },\n  createAccount({ input }) {\n    fakeDb[input.name] = input;\n    return fakeDb[input.name];\n  },\n  updateAccount({ id, input }) {\n    const updatedAccount = Object.assign({}, fakeDb[id], input);\n    console.log(id, updatedAccount);\n    fakeDb[id] = updatedAccount;\n    console.log(fakeDb);\n    return updatedAccount;\n  },\n};\n\nconst app = express();\n\napp.use(\n  "/graphql",\n  graphqlHTTP({\n    schema: schema,\n    rootValue: root,\n    graphiql: true,\n  })\n);\n\napp.use(express.static("."));\napp.listen(3000);\n')))}m.isMDXComponent=!0}}]);